#file: noinspection SpellCheckingInspection
version: '3.9'
# changing name has impact on hostnames
# places where hostnames are hardcoded:
# - data/pg_hba.conf
name: cosmo
networks:
  # changing name has impact on hostnames
  # places where hostnames are hardcoded:
  # - data/pg_hba.conf
  # net traefik is in
  backend: {}
  # net prometheus is in
  metrics: {}
  # see https://github.com/WeeJeWel/wg-easy/wiki/Using-WireGuard-Easy-with-Pi-Hole
  wg:
    ipam:
      config:
        # subnet CIDR hardcoded in
        # - ip addresses of hosts in network (wg-easy, dns, traefik)
        # - traefik whitelist config
        - subnet: 10.8.1.0/24
  hostnet:
    external: true
    name: host


secrets:
  pg_admin_password:
    file: secrets/pg_admin_password
  traefik-auth-users:
    file: secrets/traefik-auth-users

services:
  db:
    image: postgres
    container_name: db
    restart: unless-stopped
#    secrets:
#      - pg_password
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yolo
      POSTGRES_DB: postgres
#    entrypoint: [ '/bin/sh', '-c', 'export POSTGRES_PASSWORD=$$(cat /var/run/secrets/test) ; source /entrypoint.sh' ]
    volumes:
      - ./data:/var/lib/postgresql/data
    networks: [backend]
    labels:
      traefik.enable: true
      traefik.tcp.services.db.loadbalancer.server.port: 5432
      traefik.tcp.routers.db.rule: HostSNI(`vps.dcotta.eu`)
      traefik.tcp.routers.db.entrypoints: db
      traefik.tcp.routers.db.tls: true
      traefik.tcp.routers.db.tls.certResolver: lets-encrypt


  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
    platform: "linux/amd64"
    networks: [backend]
    labels:
      traefik.enable: false # TODO SECURE
      traefik.http.routers.jupyter.rule: Host(`jupyter`) && Path(`/jupyter`)
      traefik.http.services.jupyter.loadbalancer.server.port: 8888
      traefik.http.middlewares.jupyter-stripprefix.stripprefix.prefixes: /jupyter
      traefik.http.routers.jupyter.middlewares: whoami-stripprefix,vps-whitelist@file
      traefik.http.routers.jupyter.entrypoints: websecure
      traefik.http.routers.jupyter.tls: true
#    command:
#      - jupyter --ip='*' --NotebookApp.token='' --NotebookApp.password=''

  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    secrets: [traefik-auth-users]
    ports:
      - '80:80'
      - '443:443'
#      - '8080:8080'
      - '5432:5432'
    networks:
      backend:
      metrics:
      wg:
        # hardcoded in DNS
        ipv4_address: 10.8.1.4

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik/
    labels:
      traefik.enable: true
      traefik.http.routers.traefik_https.rule: Host(`traefik.vps.dcotta.eu`)
      traefik.http.routers.traefik_https.entrypoints: websecure
      traefik.http.routers.traefik_https.tls: true
      traefik.http.routers.traefik_https.tls.certResolver: lets-encrypt
      traefik.http.routers.traefik_https.service: api@internal
      traefik.http.routers.traefik_https.middlewares: auth@file

  dns:
    image: spx01/blocky
    container_name: dns
    restart: unless-stopped
    # Optional the instance hostname for logging purpose
    hostname: dns
    networks:
      metrics: # on port 4000/tcp
      wg:
        ipv4_address: 10.8.1.3
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    volumes:
      # Optional to synchronize the log timestamp with host
      - /etc/localtime:/etc/localtime:ro
      - ./blocky-dns/config.yml:/app/config.yml

  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    restart: unless-stopped
    networks:
      - metrics
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    extra_hosts:
      # needed for calling the dockerdaemon:9323 for docker metrics and node-metrics:9000
      - 'host_docker:host-gateway'
  db-metrics:
    # places where hostnames are hardcoded:
    # - data/pg_hba.conf
    image: prometheuscommunity/postgres-exporter:latest
    container_name: db-metrics
    restart: unless-stopped
    networks: [backend, metrics] # on 9187
    depends_on: [db]
    environment:
      DATA_SOURCE_NAME: 'postgresql://postgres_exporter:password@db:5432/marti_phd?sslmode=disable'
  container-metrics:
    container_name: container-metrics
    hostname: container-metrics
    privileged: true
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - metrics # on port 8080
  node-metrics:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_metrics
    command:
      - '--path.rootfs=/host'
    # on port 9100
#    network_mode: host
#    pid: host
    networks: [metrics]
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'


  grafana:
    container_name: grafana
#    restart: unless-stopped
    image: grafana/grafana:9.4.7
    user: 'root:root'
    networks: [backend, metrics]
    environment:
      GF_AUTH_BASIC_ENABLED: 'false'
      GF_AUTH_DISABLE_LOGIN_FORM: 'false'
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
      GF_SERVER_ROOT_URL: https://web.vps.dcotta.eu/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    labels:
      traefik.enable: true
      traefik.http.services.grafana.loadbalancer.server.port: 3000
      traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes: /grafana
      traefik.http.routers.grafana.rule: Host(`web.vps.dcotta.eu`) && PathPrefix(`/grafana`)
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.tls: true
      traefik.http.routers.grafana.tls.certresolver: lets-encrypt
      traefik.http.routers.grafana.middlewares: grafana-stripprefix,vps-whitelist@file

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data
    networks: [backend]
    labels:
      traefik.enable: true
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes: /portainer
      traefik.http.routers.portainer.middlewares: portainer-stripprefix,vps-whitelist@file
      traefik.http.routers.portainer.rule: Host(`web.vps.dcotta.eu`) && PathPrefix(`/portainer`)
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.tls: true
      traefik.http.routers.portainer.tls.certresolver: lets-encrypt

  wg-easy:
    image: weejewel/wg-easy
    container_name: wg-easy
    restart: unless-stopped
    environment:
      WG_HOST: vps.dcotta.eu
      WG_DEFAULT_DNS: 10.8.1.3
      # see https://github.com/WeeJeWel/wg-easy/blob/master/src/config.js
      #
      # add 'eth1' interface to masquerade so stuff is forwarded to wg network
      WG_POST_UP: "
        iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE;
        iptables -A INPUT -p udp -m udp --dport 51820 -j ACCEPT;
        iptables -A FORWARD -i wg0 -j ACCEPT;
        iptables -A FORWARD -o wg0 -j ACCEPT;
        iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth1 -j MASQUERADE;"
    #        iptables -A FORWARD -i wg0 -d dns -j ACCEPT"
    volumes:
      - ./wg:/etc/wireguard
    ports:
      # bypass traefik to reach this container that manages VPN
      - "51820:51820/udp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      net.ipv4.ip_forward: 1
      net.ipv4.conf.all.src_valid_mark: 1
    networks:
      backend: {}
#      traefik_public: {}
      # see https://github:com/WeeJeWel/wg-easy/wiki/Using-WireGuard-Easy-with-Pi-Hole:
      wg:
        ipv4_address: 10.8.1.2
    # IP address of this will be the host
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      traefik.enable: true
      traefik.http.routers.wg-easy.entrypoints: websecure
      traefik.http.routers.wg-easy.tls: true
      traefik.http.routers.wg-easy.tls.certresolver: lets-encrypt
      traefik.http.routers.wg-easy.rule: Host(`web.vps.dcotta.eu`) && PathPrefix(`/wg-easy`)
      traefik.http.routers.wg-easy.middlewares: wg-easy-stripprefix,auth@file,vps-whitelist@file
      traefik.http.middlewares.wg-easy-stripprefix.stripprefix.prefixes: /wg-easy
      traefik.http.middlewares.wg-easy-redirectslash.redirectregex.regex: (.*)/wg-easy
      traefik.http.middlewares.wg-easy-redirectslash.redirectregex.replacement: $$1/wg-easy/
      traefik.http.services.wg-easy.loadbalancer.server.port: 51821

#  bytebase:
#    image: bytebase/bytebase:1.15.0
##    restart: unless-stopped
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:5678/healthz", "||", "exit", "1" ]
#      interval: 5m
#      timeout: 60s
##    volumes:
##      - ./bytebase/data:/var/opt/bytebase
#    env_file:
#      - ./secrets/bytebase.env
#    ports:
#      - "5678:5678"
#    networks: [backend]
#    command: --data /var/opt/bytebase --port 5678
  whoami:
    image: traefik/whoami
    command:
      - --port=80
      - --name=iamfoo
    networks:
      backend:
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`web.vps.dcotta.eu`) && PathPrefix(`/whoami`)
      traefik.http.middlewares.whoami-stripprefix.stripprefix.prefixes: /whoami
      traefik.http.services.whoami.loadbalancer.server.port: 80
      traefik.http.routers.whoami.middlewares: whoami-stripprefix,auth@file
      traefik.http.routers.whoami.entrypoints: websecure
      traefik.http.routers.whoami.tls: true

