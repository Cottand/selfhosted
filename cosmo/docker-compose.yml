version: '3.9'

# changing name has impact on hostnames
# places where hostnames are hardcoded:
# - data/pg_hba.conf
name: cosmo
networks:
  # changing name has impact on hostnames
  # places where hostnames are hardcoded:
  # - data/pg_hba.conf
  backend: {}
  traefik_public:
    external: true
secrets:
  pg_admin_password:
    file: secrets/pg_admin_password
  traefik-auth-users:
    file: secrets/traefik-auth-users

services:
  db:
    image: postgres
    container_name: db
    restart: unless-stopped
#    secrets:
#      - pg_password
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yolo
      POSTGRES_DB: postgres
#    entrypoint: [ '/bin/sh', '-c', 'export POSTGRES_PASSWORD=$$(cat /var/run/secrets/test) ; source /entrypoint.sh' ]
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.db.loadbalancer.server.port=5432"
      - "traefik.tcp.routers.db.rule=HostSNI(`vps.dcotta.eu`)"
      - "traefik.tcp.routers.db.entrypoints=db"
      - "traefik.tcp.routers.db.tls=true"
      - "traefik.tcp.routers.db.tls.certResolver=lets-encrypt"


  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
    platform: "linux/amd64"
    networks:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.jupyter.rule=Host(`jupyter`)
#        && Path(`/jupyter`)
      - traefik.http.routers.jupyter.entrypoints=web
      - traefik.http.services.jupyter.loadbalancer.server.port=8888
#    command:
#      - jupyter --ip='*' --NotebookApp.token='' --NotebookApp.password=''

  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    secrets: [traefik-auth-users]
    ports:
      - '80:80'
      - '443:443'
#      - '8080:8080'
      - '5432:5432'
    networks:
      - backend
      - traefik_public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik/
    labels:
      traefik.enable: true
      traefik.http.routers.traefik_https.rule: Host(`traefik.vps.dcotta.eu`)
      traefik.http.routers.traefik_https.entrypoints: websecure
      traefik.http.routers.traefik_https.tls: true
      traefik.http.routers.traefik_https.tls.certResolver: lets-encrypt
      traefik.http.routers.traefik_https.service: api@internal
      traefik.http.routers.traefik_https.middlewares: auth@file

  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    extra_hosts:
      - host.docker.internal:host-gateway
      #host.docker.internal:127.0.0.1 for linux
  db-metrics:
    # places where hostnames are hardcoded:
    # - data/pg_hba.conf
    image: prometheuscommunity/postgres-exporter:latest
    container_name: db-metrics
    restart: unless-stopped
    networks: [backend]
    depends_on: [db]
    ports:
      - '9187:9187'
    environment:
      DATA_SOURCE_NAME: 'postgresql://postgres_exporter:password@db:5432/marti_phd?sslmode=disable'

  grafana:
    container_name: grafana
#    restart: unless-stopped
    image: grafana/grafana:8.3.0
    user: 'root:root'
    networks:
      - backend
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/grafana"
      - "traefik.http.routers.grafana.rule=Host(`vps.dcotta.eu`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=lets-encrypt"
      - "traefik.http.routers.grafana.middlewares=grafana-stripprefix,auth@file"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data
    networks: [backend]
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer"
      - "traefik.http.routers.portainer.middlewares=portainer-stripprefix"
      - "traefik.http.routers.portainer.rule=Host(`vps.dcotta.eu`) && PathPrefix(`/portainer`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=lets-encrypt"

  wg-easy:
    image: weejewel/wg-easy
    container_name: wg-easy
    restart: unless-stopped
    environment:
      - WG_HOST=vps.dcotta.eu
    env_file:
      # SECRET
      - ./secrets/bytebase.env
    volumes:
      - ./wg:/etc/wireguard
    ports:
      # bypass traefik to reach this container that manages VPN
      - "51820:51820/udp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      net.ipv4.conf.all.src_valid_mark: 1
      net.ipv4.ip_forward: 1
    networks: [backend, traefik_public]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wg-easy.entrypoints=websecure"
      - "traefik.http.routers.wg-easy.tls=true"
      - "traefik.http.routers.wg-easy.tls.certresolver=lets-encrypt"
      - "traefik.http.routers.wg-easy.rule=Host(`vps.dcotta.eu`) && PathPrefix(`/wg-easy`)"
      - "traefik.http.routers.wg-easy.middlewares=wg-easy-stripprefix,auth@file"
      - "traefik.http.middlewares.wg-easy-stripprefix.stripprefix.prefixes=/wg-easy"
      - "traefik.http.middlewares.wg-easy-redirectslash.redirectregex.regex=(.*)/wg-easy"
      - "traefik.http.middlewares.wg-easy-redirectslash.redirectregex.replacement=$$1/wg-easy/"
      - "traefik.http.services.wg-easy.loadbalancer.server.port=51821"

#  bytebase:
#    image: bytebase/bytebase:1.15.0
##    restart: unless-stopped
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:5678/healthz", "||", "exit", "1" ]
#      interval: 5m
#      timeout: 60s
##    volumes:
##      - ./bytebase/data:/var/opt/bytebase
#    env_file:
#      - ./secrets/bytebase.env
#    ports:
#      - "5678:5678"
#    networks: [backend]
#    command: --data /var/opt/bytebase --port 5678
